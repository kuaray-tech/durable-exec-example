package com.example.common.dto;

import java.io.Serializable;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Positive;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * OrderDTO is a simple data transfer object that captures the information
 * required to process an order.  It is intentionally decoupled from
 * database entities so that it can be serialised and passed to Temporal
 * Workflows and Activities.  Using a DTO rather than an entity avoids
 * coupling workflow code to persistence frameworks.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class OrderDTO implements Serializable {

    /**
     * A unique identifier for the order.  In a real system this would be
     * generated by the order service when the order is persisted.
     */
    private Long orderId;

    /**
     * Identifier of the product being ordered.
     */
    @NotNull
    private Long productId;

    /**
     * Unit price of the product.
     */
    @Positive
    private Double price;

    /**
     * Quantity of the product being ordered.
     */
    @Positive
    private Integer quantity;
}